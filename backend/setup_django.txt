================================================================================
🚗 GPS TRACKING SYSTEM - SETUP & USAGE GUIDE
================================================================================

📋 SYSTEM OVERVIEW:
- Track 8,615+ GPS devices using ProTrack365 API
- Django backend with PostgreSQL database
- Nuxt.js frontend interface
- Real-time GPS data processing

================================================================================
🎯 QUICK START GUIDE
================================================================================

1️⃣ START DATABASE:
    docker start gps-postgres
    docker stop gps-postgres

2️⃣ START BACKEND:
   Go to backend folder and run:
   python manage.py runserver

3️⃣ START FRONTEND:
   Go to frontend folder and run:
   npm run dev

4️⃣ ACCESS SYSTEM:
   - Website: http://localhost:3000/
   - Admin: http://127.0.0.1:8000/admin
   
        Username: huor
        Email: hourousa9@gmail.com
        Password: Menghuor601

================================================================================
📡 GPS DATA COMMANDS
================================================================================

🔄 FETCH NEW GPS DATA:
   python manage.py fetch_tracking_data

💾 LOAD DATA TO DATABASE:   
   # Step 2: Load new data to database (keeps existing data)
   python manage.py load_device_data response_logs/tracking_run_[timestamp]/all_records.json
   
   # Example with actual folder name:
   python manage.py load_device_data response_logs/tracking_run_2025-10-02_07-53-33/all_records.json

🗑️ CLEAR ALL DEVICE DATA:
   python manage.py clear_device_data --confirm

================================================================================
🏃‍♂️ DAILY WORKFLOW (4 SIMPLE STEPS)
================================================================================

1. Start database: docker start gps-postgres
2. Activate environment: source venv/bin/activate
3. Fetch GPS data: python manage.py fetch_tracking_data  
4. Load to database: python manage.py load_device_data response_logs/tracking_run_2025-10-02_07-53-33/all_records.json

🔄 Alternative - Replace All Data:
1-3. Same as above
4. Clear & load: python manage.py load_device_data response_logs/tracking_run_2025-10-02_07-53-33/all_records.json --clear-existing

================================================================================
🌐 ACCESS INFORMATION
================================================================================

📱 WEBSITES:
   - Main App: http://localhost:3000/
   - API: http://127.0.0.1:8000/
   - Admin Panel: http://127.0.0.1:8000/admin

� LOGIN CREDENTIALS:
   Admin Username: huor
   Admin Email: hourousa9@gmail.com
   Admin Password: Menghuor601

🗄️ DATABASE (PostgreSQL):
   Host: localhost
   Port: 5432
   Database: postgres
   Username: postgres
   Password: 123123

================================================================================
📊 DATA ANALYSIS (DBeaver SQL Queries)
================================================================================

📈 BASIC STATISTICS:
   SELECT COUNT(*) FROM api_devicedata;

🏆 RANKING SYSTEM:
   SELECT ranking_id, imei, latitude, longitude, status 
   FROM api_devicedata 
   ORDER BY ranking_id 
   LIMIT 10;

📊 DEVICE STATUS:
   SELECT datastatus_description, COUNT(*) 
   FROM api_devicedata 
   GROUP BY datastatus_description;

🎯 SUCCESS RATE:
   SELECT status, COUNT(*) 
   FROM api_devicedata 
   GROUP BY status;

📍 GPS COORDINATES:
   SELECT COUNT(*) 
   FROM api_devicedata 
   WHERE latitude != 0 AND longitude != 0;

📋 TOP 20 RANKED RECORDS:
   SELECT ranking_id, imei, latitude, longitude, datastatus_description, status
   FROM api_devicedata 
   ORDER BY ranking_id 
   LIMIT 20;

🏆 RANKING RANGE QUERIES:
   -- Get records by rank range
   SELECT ranking_id, imei, status 
   FROM api_devicedata 
   WHERE ranking_id BETWEEN 1000 AND 1100
   ORDER BY ranking_id;

📊 PAGINATION QUERIES:
   -- Page 1 (records 1-50)
   SELECT ranking_id, imei, latitude, longitude 
   FROM api_devicedata 
   ORDER BY ranking_id 
   LIMIT 50 OFFSET 0;
   
   -- Page 2 (records 51-100)
   SELECT ranking_id, imei, latitude, longitude 
   FROM api_devicedata 
   ORDER BY ranking_id 
   LIMIT 50 OFFSET 50;

================================================================================
📁 IMPORTANT FILE LOCATIONS
================================================================================

📊 GPS DATA: backend/response_logs/tracking_run_[timestamp]/
📋 DEVICE LIST: backend/scripts/MAIN.csv
🗄️ DATABASE: Docker container (gps-postgres)

================================================================================
🔧 TROUBLESHOOTING
================================================================================

❓ CHECK DOCKER:
   docker ps
   docker logs gps-postgres

❓ CHECK DJANGO:
   python manage.py check

❓ RESTART SERVICES:
   docker restart gps-postgres
   python manage.py runserver

================================================================================
📈 SYSTEM STATISTICS
================================================================================

📊 Current Status:
   ✅ Total Devices: 8,615
   ✅ Database Coverage: 100%
   ✅ API Integration: ProTrack365
   ✅ Export Formats: JSON, CSV
   ✅ Ranking System: #1 to #8615

🎯 Key Features:
   ✅ Real-time GPS tracking
   ✅ Batch processing
   ✅ Error handling
   ✅ Web interface
   ✅ Database storage
   ✅ Admin panel
   ✅ Ranking system
   ✅ Pagination support
   ✅ Range queries

================================================================================
💡 TIPS FOR SUCCESS
================================================================================

⚡ Daily Routine:
   1. Start with: docker start gps-postgres
   2. Activate environment: source venv/bin/activate
   3. Fetch data: python manage.py fetch_tracking_data
   4. Load data: python manage.py load_device_data response_logs/tracking_run_2025-10-02_07-53-33/all_records.json
   5. Check ranking: Check that records have sequential ranking IDs

🎯 Best Practices:
   - Run GPS updates daily
   - Use --clear-existing for fresh data replacement
   - Check database regularly with ranking queries
   - Monitor system logs
   - Backup important data
   - Verify ranking integrity after data loads

📞 Need Help?
   - Check this guide first
   - Look at response_logs for errors
   - Use DBeaver for data analysis

================================================================================
END OF GUIDE - Your GPS Tracking System is Ready! 🎉
================================================================================